// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  url               = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(cuid())
  email              String        @unique
  name               String?
  password           String
  gender             String?
  photos             Photo[]
  bio                String?
  birthday           DateTime?
  numberActiveTables Int           @default(0) @map("number_active_tables")
  Participant        Participant[]
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")
  activatedAt        DateTime?     @map("activated_at")
  role               UserRole      @default(USER)
  status             Status        @default(ACTIVE)
  address            Address?        @relation(fields: [addressId], references: [id])
  addressId          String?        @map("address_id")
}

model Photo {
  id     String @id @default(cuid())
  url    String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Address {
  id        String   @id @default(cuid())
  lat       Float?
  lng       Float?
  address   String?
  city      String?
  state     String?
  country   String?
  zip       String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User[]
  Places    Places[]
}

model Places {
  id          String       @id @default(cuid())
  name        String
  address     Address       @relation(fields: [addressId], references: [id])
  addressId   String       @map("address_id")
  description String
  review      Int
  categories  Category[]
  photos      PlacePhoto[]
  tables      Table[]
  lat         Float
  lng         Float
}

model Table {
  id           String        @id @default(cuid())
  number       Int
  places       Places        @relation(fields: [placeId], references: [id])
  placeId      String
  status       TableStatus   @default(ACTIVE)
  date         String
  time         String
  duration     String
  description  String
  photo        String
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  participants Participant[]
}

model Participant {
  id        String          @id @default(cuid())
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  table     Table           @relation(fields: [tableId], references: [id])
  tableId   String
  status    Status
  role      ParticipantRole @default(GUEST)
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
}

model PlacePhoto {
  id      String @id @default(cuid())
  url     String
  place   Places @relation(fields: [placeId], references: [id])
  placeId String
}

enum UserRole {
  ADMIN
  USER
}

enum ParticipantRole {
  OWNER
  GUEST
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}

enum Category {
  RESTAURANT
  BAR
  CAFE
  PUB
  CLUB
  LOUNGE
  OTHER
}

enum TableStatus {
  ACTIVE
  INACTIVE
  CLOSED
  HIDDEN
}
